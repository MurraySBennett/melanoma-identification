sim_col_names = c("mu", "sd", "med", "se", "n_sims", "mean_ij_contests", "n_items", "trials", "iter")
r = length(n_items) * length(mean_contests_per_pair)
c = length(sim_col_names)
rmse_desc = data.frame(matrix(ncol=c, nrow=r, dimnames=list(NULL, sim_col_names)))
graphs_desc = rmse_desc
order_error_desc = rmse_desc
p_corr_desc = rmse_desc
set.seed(1989)
tic()
sim_counter = 0
for (i in n_items){
for (c in mean_contests_per_pair){
contests <- rpois(n=i, lambda = c)
notzero <- contests > 0
Nmatrix <- Matrix(nrow = i, ncol = i)
ij <- which(lower.tri(Nmatrix), arr.ind = TRUE)[notzero, ]
Nmatrix <- sparseMatrix(
i = ij[, 1],
j = ij[, 2],
x = contests[notzero],
symmetric = TRUE,
dims = c(i, i))
## Generate at random the (normalized to mean 1) 'player abilities':
pi_vec <- exp(rnorm(i) / 4)
pi_vec <- pi_vec / mean(pi_vec)
## Now generate contest outcome counts from the Bradley-Terry model:
big_matrices <- simulate_BT(pi_vec, Nmatrix, nsim = n_sims, seed = 1)
for (m in 1:n_sims){
# print(sum(big_matrices[[m]]))
big_matrix <- big_matrices[[m]]
big_btdata <- btdata(big_matrix, return_graph = TRUE)
## Fit the Bradley-Terry model to the simulated data:
the_model <- btfit(big_btdata, a = 1)
pi_fitted <- the_model $ pi $ full_dataset
## calculate RMSE
actual = log(pi_vec[as.numeric(names(pi_fitted))])
predicted = log(pi_fitted)
predicted[is.infinite(predicted)] <- NA
# Metrics
rmse[m] = sqrt(mean((actual - predicted)^2, na.rm=TRUE))
trials = sum(big_matrix)
n_unique_graphs[m] = length(the_model$diagonal)
act_ordered = length(actual) - order(actual) + 1
pred_ordered= length(predicted) - order(predicted) + 1
order_err[m] = sqrt(mean((act_ordered - pred_ordered)^2, na.rm=TRUE))
p_corr[m] = cor(actual, predicted, method="pearson", use = "complete.obs")
# print(sprintf("RMSE: %s, n-trials: %s, unique graphs: %s, order error: %s, p-corr: %s", round(rmse,4), n_trials_simulated, n_unique_graphs, round(order_err,4), round(p_corr,4)))
}
sim_counter = sim_counter + 1
rmse_desc[sim_counter,] = c(get_desc(rmse), return_sim_parms(n_sims, c, i, mean(trials), sim_counter))
graphs_desc[sim_counter,] = c(get_desc(n_unique_graphs), return_sim_parms(n_sims, c, i, mean(trials), sim_counter))
order_error_desc[sim_counter,] = c(get_desc(order_err), return_sim_parms(n_sims, c, i, mean(trials), sim_counter))
p_corr_desc[sim_counter,] = c(get_desc(p_corr), return_sim_parms(n_sims, c, i, mean(trials), sim_counter))
}
}
toc()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))))
n_players <- 10
n_trials <- 10
players <- seq(1, n_players)
sim_col_names <- c("player1", "player2", "winner")
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))))
n_players <- 10
n_trials <- 10
players <- seq(1, n_players)
sim_col_names <- c("player1", "player2", "winner")
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))
view(data)
View(data)
players
sample(players, 5, replace=T)
sample(players, 10, replace=T)
a<-sample(players, 10, replace=T)
d <- matrix(a, nrow = 5, byrow = TRUE)
d
a
n_players <- 10
n_trials <- 10
players <- seq(1, n_players)
sim_col_names <- c("player1", "player2", "winner")
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))
get_contests <- function(p_list, trials){
players <- sample(p_list, trials * 2, replace = T)
contests <- matrix(players, nrow = trials, byrow = T)
return(contests)
}
data[, 1:2] <- get_contests(players, n_trials)
view(data)
data$player1 == data$player2
a<-data$player1 == data$player2
a
sum(a)
data[, a] <- sample(players, sum(a), replace=T)
view(data)
data[, 1:2] <- get_contests(players, n_trials)
view(data)
a<-data$player1 == data$player2
a
a[1] = TRUE
a
data[a,1] <- sample(players, sum(a), replace=T)
view(data)
a[c(1, 3, 5)] = TRUE
a
view(data)
data[a,1] <- sample(players, sum(a), replace=T)
view(data)
a <- TRUE
c = 0
while (a){}
while(a) {
c = c+1
if (c>= 5){ a =FALSE}
}
c
n_players <- 4
n_trials <- 10
players <- seq(1, n_players)
sim_col_names <- c("player1", "player2", "winner")
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))
get_contests <- function(p_list, trials){
players <- sample(p_list, trials * 2, replace = T)
contests <- matrix(players, nrow = trials, byrow = T)
no_mates <- contests[, 1] == contests[, 2]
while (sum(no_mates > 0)){
print(paste0("Number of players without friends: ", sum(no_mates)))
contests[no_mates, 1] <- sample(p_list, sum(no_mates), replace=T)
no_mates <- contests[, 1] == contests[, 2]
}
return(contests)
}
data[, 1:2] <- get_contests(players, n_trials)
view(data)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos="https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstsan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.getenv(MAKEFLAGS=paste0("-j", parallel::detectCores()))
install.packages(c("StanHeaders","rstan"),type="source")
example(stan_model, package="rstan", run.dontrun = TRUE)
stancode
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library("rstan") # observe startup messages
rstan_options(auto_write = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(furrr)
# load libraries
devtools::install_github("hathawayj/buildings")
no_cores <- availableCores() - 1
plan(multicore, workers = no_cores)
library(buildings) # remember that the 'permits' data object is created when the library is loaded.
a <- 4
ff <- function(x){
for (i in 1:1000){
i
}
ggplot() + geom_point(x = permits[x, "value"])
}
list_object <- as.list(1:7500)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(tmp1)
tic()
tmp2 <- future_map(list_object, ff)
toc()
source("~/.active-rstudio-document", echo=TRUE)
View(tmp2)
second_sequence <- rep(5, 8)
tic()
nothingness <- map(second_sequence, ~Sys.sleep(.x))
toc()
sequential)
plan(sequential)
tic()
nothingness <- future_map(second_sequence, ~Sys.sleep(.x))
toc()
plan(multiprocess)
tic()
nothingness <- future_map(second_sequence, ~Sys.sleep(.x))
toc()
# tic()
# nothingness <- map(second_sequence, ~Sys.sleep(.x))
# toc()
#
#
# plan(sequential)
# tic()
# nothingness <- future_map(second_sequence, ~Sys.sleep(.x))
# toc()
#
plan(multicore, workers = no_cores)
tic()
nothingness <- future_map(second_sequence, ~Sys.sleep(.x))
toc()
# tic()
# nothingness <- map(second_sequence, ~Sys.sleep(.x))
# toc()
#
#
# plan(sequential)
# tic()
# nothingness <- future_map(second_sequence, ~Sys.sleep(.x))
# toc()
#
plan(multisession, workers = no_cores)
tic()
nothingness <- future_map(second_sequence, ~Sys.sleep(.x))
toc()
xy <- matrix(1, 2, 2)
x[:, 2] <- 2
xy[:, 2] <- 2
xy
xy[, 2] <- 2
xy
print_sleep <- function (x, y){
print(x)
sleep(y)
}
print_sleep(1,2)
print_sleep <- function (x, y){
print(x)
Sys.sleep(y)
}
xy <- matrix(1, 2, 2)
xy[, 2] <- 2
print_sleep(1,2)
print_sleep <- function (x, y){
Sys.sleep(y)
print(x)
}
print_sleep(1,2)
nothingness <- future_map(xy, print_sleep)
nothingness <- future_map(xy[,1], xy[, 2], print_sleep)
toc()
tic()
xy <- matrix(1, 2, 2)
xy[, 2] <- 2
nothingness <- future_map(xy[,1], xy[, 2], print_sleep)
toc()
tic()
xy <- matrix(1, 2, 2)
xy[, 2] <- 2
nothingness <- future_map2(xy[,1], xy[, 2], print_sleep)
toc()
x <- list(1, 10, 100)
y <- list(1, 2, 3)
z <- list(5, 50, 500)
nothingness <- future_map2(x, x, print_sleep)
nothingness <- future_map2(y, x, print_sleep)
nothingness <- future_map2(x, y, print_sleep)
y
y
nothingness <- future_map2(y, x, print_sleep)
list(c(x,y,z))
a<-list(c(x,y,z))
View(a)
a<-list(x,y,z)
a<-list("x"=x,"y"=y,"z"=z)
n_trials
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
trials_per_particiapant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
trials_per_participant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
n_simulations = 10 # 1000?
min_participants <- 10
max_participants <- 30 # you want to overestimate this, to see how far back you need to go.
participant_step <- 10
trials_per_participant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
min_players <- 5000 # players === images
max_players <- 40000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
n_trials
rep(n_trials, 3)
rep() ?
/
?rep
rep(n_trials, 3, each=2)
rep(n_trials, 1, each=2)
n_players
n_simulations = 10 # 1000?
min_participants <- 10
max_participants <- 30 # you want to overestimate this, to see how far back you need to go.
participant_step <- 10
trials_per_participant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
min_players <- 5000 # players === images
max_players <- 40000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
sim_list <- list(1:n_simulations)
trial_list<-list(rep(n_trials, 1, each=n_simulations))
player_list<-list(rep(n_players, 1, each=n_simulations))
player_list
n_simulations = 2 # 1000?
min_participants <- 10
max_participants <- 30 # you want to overestimate this, to see how far back you need to go.
participant_step <- 10
trials_per_participant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- 900#trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
min_players <- 5000 # players === images
max_players <- 10000# 40000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
sim_list <- list(1:n_simulations)
trial_list<-list(rep(n_trials, 1, each=n_simulations))
player_list<-list(rep(n_players, 1, each=n_simulations))
player_list
trial_list
sim_lis
sim_list
r
r <- length(n_trials) * length(n_players) * n_simulations
r
sim_list <- list(rep(1:n_simulations, 1, each=total_sims / n_simulations)
sim_list <- list(rep(1:n_simulations, 1, each=total_sims / n_simulations))
sim_list <-
/
sim_list <- list(rep(1:n_simulations, 1, each=total_sims / n_simulations))
total_sims <- length(n_trials) * length(n_players) * n_simulations
sim_list <- list(rep(1:n_simulations, 1, each=total_sims / n_simulations))
sim_list
sim_list <- list(rep(1:n_simulations, total_sims / n_simulations, each=n_simulations))
sim_list
n_simulations
sim_list = list(rep(1:n_simulations, 1, each=n_simulations)
)
sim_list
sim_list = list(rep(1:n_simulations, 2, each=1))
sim_list
list(rep(1:5, 2, each=1))
sim_list <- list(rep(1:n_simulations, n_simulations))
sim_list
total_sims
n_trials
trials_per_participant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- 900#trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
trials_per_participant <- 450
min_trials <- 450# trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- 900#trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, participant_step * trials_per_particiapant)
min_players <- 5000 # players === images
max_players <- 10000# 40000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
total_sims <- length(n_trials) * length(n_players) * n_simulations
total_sims
n_sims
n_simulations
n_players
n_trials
n_trials <- seq(min_trials, max_trials, min_trials)#participant_step * trials_per_particiapant)
min_players <- 5000 # players === images
max_players <- 10000# 40000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
total_sims <- length(n_trials) * length(n_players) * n_simulations
sim_list <- list(rep(1:n_simulations, n_simulations))
trial_list<-list(rep(n_trials, 1, each=n_simulations))
player_list<-list(rep(n_players, 1, each=n_simulations))
total_sims
sim_list
sim_list <- list(rep(1:n_simulations, n_simulations))
trial_list<-list(rep(n_trials, 1, each=n_simulations))
player_list<-list(rep(n_players, 1, each=n_simulations))
sim_list
trial_list
trial_list<-list(rep(n_trials, length(n_players), each=n_simulations))
trial_list
player_list<-list(rep(n_players, 1, each=n_simulations))
player_list
player_list<-list(rep(n_players, 1, each=n_simulations*length(n_trials)))
player_list
sim_list
sim_list <- list(rep(1:n_simulations, n_simulations, each=2))
sim_list
sim_list <- list(rep(1:n_simulations, n_simulations * length(n_players) * length(n_trials)))
sim_list
sim_list <- list(rep(1:n_simulations, length(n_players) * length(n_trials)))
sim_list
trial_list<-list(rep(n_trials, length(n_players), each=n_simulations))
trial_list
n_simulations = 3
total_sims <- length(n_trials) * length(n_players) * n_simulations
sim_list <- list(rep(1:n_simulations, length(n_players) * length(n_trials)))
trial_list<-list(rep(n_trials, length(n_players), each=n_simulations))
player_list<-list(rep(n_players, 1, each=n_simulations*length(n_trials)))
sim_list
trial_list
length(trial_list)
shape(trial_list)
player_list
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
nothingness
trial_list
sim_data <- future_pmap(list(trial_list, player_list, sim_list), run_ism)
sim_data <- future_pmap(list(trial_list, player_list, sim_list), run_sim)
sim_data <- future_pmap(list(trial_list, player_list, sim_list), run_sim, seed=TRUE)
sim_data <- future_pmap(list(trial_list, player_list, sim_list), run_sim)
sim_data
rm(sim_data)
sim_data <- future_pmap(list(trial_list, player_list, sim_list), run_sim)
sim_data
list(trial_list, player_list, sim_list)
a=list(trial_list, player_list, sim_list)
a[1]
a[[1]]
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
sim_data
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
length(sim_list)
length(sim_list[[]])
length(sim_list[[1]])
length(trial_list[[1]])
length(player_list[[1]])
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
sim_data
rm(sim_data)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
sim_data
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
sim_data
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
sim_data
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
sim_data
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
seq(5,70,5)
library(tictoc)
library(rstan)
library(igraph)
library(furrr)
rstan_options(auto_write=TRUE)
no_cores <- availableCores() - 1
options(mc.cores = parallel::detectCores(logical = FALSE))
setwd("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation")
run_bay = FALSE
n_simulations = 1000
min_participants <- 40
max_participants <- 80 # you want to overestimate this, to see how far back you need to go.
participant_step <- 10
trials_per_participant <- 450
min_trials <- trials_per_particiapant * min_participants # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- trials_per_particiapant * max_participants
n_trials <- seq(min_trials, max_trials, min_trials)#participant_step * trials_per_particiapant)
min_players <- 5000 # players === images
max_players <- 70000# 40000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
total_sims <- length(n_trials) * length(n_players) * n_simulations
total_sims
sim_data
write.csv(sim_data, paste('.\\simulation_p', min_participants, '-', max_participants, '_images', min_players, '-', max_players, '.csv',sep=""), row.names=FALSE)
n_players
n_trials
trials_per_particiapant * participant_step
n_trials <- seq(min_trials, max_trials, trials_per_particiapant * participant_step)#participant_step * trials_per_particiapant)
n_trials
18000 / 450
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")

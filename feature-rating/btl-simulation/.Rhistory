mle_data <- data.frame(alpha = alpha, alpha_star = alpha_star)
mle_plot <-
ggplot(mle_data, aes(x = alpha, y = alpha_star)) +
geom_abline(slope = 1, intercept = 0, color="green", linewidth = 2) +
geom_point(size = 2)
mle_plot
alpha_star <- mle_model_estimates$par[paste("alpha[", 1:n_players, "]", sep="")]
mle_data <- data.frame(alpha = alpha, alpha_star = alpha_star)
mle_plot <-
ggplot(mle_data, aes(x = alpha, y = alpha_star)) +
geom_abline(slope = 1, intercept = 0, color="green", linewidth = 2) +
geom_point(size = 2)
mle_plot
alpha_star <- mle_model_estimates$par[paste("alpha[", 1:n_players, "]", sep="")]
mle_data <- data.frame(alpha = alpha, alpha_star = alpha_star)
ranked_players <-
mle_model_estimates$par[paste("ranked[", 1:K, "]",
sep="")]
options(htmltools.dir.version = FALSE)
options(digits=3)
library(ggplot2)
library(gridExtra)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=FALSE)
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
knitr::opts_chunk$set(comment="")
library(reshape)
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores(logical = FALSE))
library(lemon)
# ggtheme_tufte <- function() {
#   theme(plot.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        size = 0.5,
#                        linetype = "solid"),
#         plot.margin=unit(c(1, 1, 0.5, 0.5), "lines"),
#         panel.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        size = 0.5,
#                        linetype = "solid"),
#         panel.grid.major = element_line(colour = "white", size = 1, linetype="dashed"),
#           # blank(),
#         panel.grid.minor = element_blank(),
#         legend.box.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        linetype = "solid"),
#         axis.ticks = element_blank(),
#         axis.text = element_text(family = "Palatino", size = 16),
#         axis.title.x = element_text(family = "Palatino", size = 20,
#                                     margin = margin(t = 15, r = 0, b = 0, l = 0)),
#         axis.title.y = element_text(family = "Palatino", size = 18,
#                                     margin = margin(t = 0, r = 15, b = 0, l = 0)),
#         strip.background = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid"),
#         strip.text = element_text(family = "Palatino", size = 16),
#         legend.text = element_text(family = "Palatino", size = 16),
#         legend.title = element_text(family = "Palatino", size = 16,
#                                     margin = margin(b = 5)),
#         legend.background = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid"),
#         legend.key = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid")
#   )
# }
printf <- function(msg = "%5.3f", ...) {
cat(sprintf(msg, ...))
}
n_players <- 50
n_trials <- 50^2
players <- seq(1, n_players)
sim_col_names <- c("player0", "player1", "winner")
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))
get_contests <- function(p_list, trials){
players <- sample(p_list, trials * 2, replace = T)
contests <- matrix(players, nrow = trials, byrow = T)
no_mates <- contests[, 1] == contests[, 2]
while (sum(no_mates > 0)){
contests[no_mates, 1] <- sample(p_list, sum(no_mates), replace=T)
no_mates <- contests[, 1] == contests[, 2]
}
return( contests )
}
inv_logit <- function(u){
inv_log <- 1 / (1 + exp(-u))
return ( inv_log )
}
center <- function(u){
c <- u - sum(u) / length(u)
return ( c )
}
data[, 1:2] <- get_contests(players, n_trials)
alpha <- center(rnorm(n_players))
log_odds_p1 <- alpha[data$player1] - alpha[data$player0]
win_prob_p1 <- inv_logit(log_odds_p1)
y <- rbinom(n_trials, 1, win_prob_p1)
data$winner <- y
options(htmltools.dir.version = FALSE)
options(digits=3)
library(ggplot2)
library(gridExtra)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=FALSE)
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
knitr::opts_chunk$set(comment="")
library(reshape)
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores(logical = FALSE))
library(lemon)
# ggtheme_tufte <- function() {
#   theme(plot.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        size = 0.5,
#                        linetype = "solid"),
#         plot.margin=unit(c(1, 1, 0.5, 0.5), "lines"),
#         panel.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        size = 0.5,
#                        linetype = "solid"),
#         panel.grid.major = element_line(colour = "white", size = 1, linetype="dashed"),
#           # blank(),
#         panel.grid.minor = element_blank(),
#         legend.box.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        linetype = "solid"),
#         axis.ticks = element_blank(),
#         axis.text = element_text(family = "Palatino", size = 16),
#         axis.title.x = element_text(family = "Palatino", size = 20,
#                                     margin = margin(t = 15, r = 0, b = 0, l = 0)),
#         axis.title.y = element_text(family = "Palatino", size = 18,
#                                     margin = margin(t = 0, r = 15, b = 0, l = 0)),
#         strip.background = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid"),
#         strip.text = element_text(family = "Palatino", size = 16),
#         legend.text = element_text(family = "Palatino", size = 16),
#         legend.title = element_text(family = "Palatino", size = 16,
#                                     margin = margin(b = 5)),
#         legend.background = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid"),
#         legend.key = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid")
#   )
# }
printf <- function(msg = "%5.3f", ...) {
cat(sprintf(msg, ...))
}
n_players <- 50
n_trials <- 50^2
players <- seq(1, n_players)
sim_col_names <- c("player0", "player1", "winner")
data <- data.frame(matrix(ncol=3, nrow=n_trials, dimnames=list(NULL, sim_col_names)))
get_contests <- function(p_list, trials){
players <- sample(p_list, trials * 2, replace = T)
contests <- matrix(players, nrow = trials, byrow = T)
no_mates <- contests[, 1] == contests[, 2]
while (sum(no_mates > 0)){
contests[no_mates, 1] <- sample(p_list, sum(no_mates), replace=T)
no_mates <- contests[, 1] == contests[, 2]
}
return( contests )
}
inv_logit <- function(u){
inv_log <- 1 / (1 + exp(-u))
return ( inv_log )
}
center <- function(u){
c <- u - sum(u) / length(u)
return ( c )
}
data[, 1:2] <- get_contests(players, n_trials)
alpha <- center(rnorm(n_players))
log_odds_p1 <- alpha[data$player1] - alpha[data$player0]
win_prob_p1 <- inv_logit(log_odds_p1)
y <- rbinom(n_trials, 1, win_prob_p1)
data$winner <- y
head(data)
mle_model_data <-
list(K = n_players, N = n_trials, player0 = data$player0, player1 = data$player1, y = data$winner )
# mle_model <- stan_model(file="individual-uniform.stan")
mle_model_estimates <- optimizing(mle_model, data=mle_model_data)
# bayesian_ind <- stan_model(bayesian-individual-uniform.stan)
individual_posterior <- sampling(bayesian_ind, data = mle_model_data)
print(individual_posterior, "alpha", probs=c(0.05, 0.5, 0.95))
alpha_star <- mle_model_estimates$par[paste("alpha[", 1:n_players, "]", sep="")]
mle_data <- data.frame(alpha = alpha, alpha_star = alpha_star)
ranked_players <- mle_model_estimates$par[paste("ranked[", 1:K, "]",sep="")]
ranked_players <- mle_model_estimates$par[paste("ranked[", 1:n_players, "]",sep="")]
alpha_star <- mle_model_estimates$par[paste("alpha[", 1:n_players, "]", sep="")]
mle_data <- data.frame(alpha = alpha, alpha_star = alpha_star)
ranked_players <- mle_model_estimates$par[paste("ranked[", 1:n_players, "]",sep="")]
alpha_hat <- rep(NA, n_players)
for (player in 1:n_players)
alpha_hat[player] <- mean(extract(individual_posterior)$alpha[ , player])
mle_plot <-
ggplot(mle_data, aes(x = alpha, y = alpha_star)) +
geom_abline(slope = 1, intercept = 0, color="green", linewidth = 2) +
geom_point(size = 2)
mle_plot
alpha_star <- mle_model_estimates$par[paste("alpha[", 1:n_players, "]", sep="")]
mle_data <- data.frame(alpha = alpha, alpha_star = alpha_star)
ranked_players <- mle_model_estimates$par[paste("ranked[", 1:n_players, "]",sep="")]
alpha_hat <- rep(NA, n_players)
for (player in 1:n_players)
alpha_hat[player] <- mean(extract(individual_posterior)$alpha[ , player])
mle_plot <-
ggplot(mle_data, aes(x = alpha, y = alpha_star)) +
geom_abline(slope = 1, intercept = 0, color="green", linewidth = 2) +
geom_point(size = 2)
bayes_fit_plot <-
ggplot(data.frame(alpha = alpha, alpha_hat = alpha_hat),
aes(x = alpha, y = alpha_hat)) +
geom_abline(slope = 1, intercept = 0, color="green", size = 2) +
geom_point(size = 2)
mle_plot
bayes_fit_plot
options(htmltools.dir.version = FALSE)
options(digits=3)
library(ggplot2)
library(gridExtra)
library(knitr)
knitr::opts_chunk$set(
echo = TRUE,
cache = FALSE,
cache.extra = packageVersion("tufte"),
comment = "",
tidy = FALSE
)
knitr::opts_chunk$set(cache=FALSE)
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
knitr::opts_chunk$set(comment="")
library(reshape)
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores(logical = FALSE))
library(lemon)
# ggtheme_tufte <- function() {
#   theme(plot.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        size = 0.5,
#                        linetype = "solid"),
#         plot.margin=unit(c(1, 1, 0.5, 0.5), "lines"),
#         panel.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        size = 0.5,
#                        linetype = "solid"),
#         panel.grid.major = element_line(colour = "white", size = 1, linetype="dashed"),
#           # blank(),
#         panel.grid.minor = element_blank(),
#         legend.box.background =
#           element_rect(fill = "#fffff8",
#                        colour = "#fffff8",
#                        linetype = "solid"),
#         axis.ticks = element_blank(),
#         axis.text = element_text(family = "Palatino", size = 16),
#         axis.title.x = element_text(family = "Palatino", size = 20,
#                                     margin = margin(t = 15, r = 0, b = 0, l = 0)),
#         axis.title.y = element_text(family = "Palatino", size = 18,
#                                     margin = margin(t = 0, r = 15, b = 0, l = 0)),
#         strip.background = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid"),
#         strip.text = element_text(family = "Palatino", size = 16),
#         legend.text = element_text(family = "Palatino", size = 16),
#         legend.title = element_text(family = "Palatino", size = 16,
#                                     margin = margin(b = 5)),
#         legend.background = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid"),
#         legend.key = element_rect(fill = "#fffff8",
#                                         colour = "#fffff8",
#                                         linetype = "solid")
#   )
# }
printf <- function(msg = "%5.3f", ...) {
cat(sprintf(msg, ...))
}
mle_model_data <-
list(K = n_players, N = n_trials, player0 = data$player0, player1 = data$player1, y = data$winner )
# mle_model <- stan_model(file="individual-uniform.stan")
mle_model_estimates <- optimizing(mle_model, data=mle_model_data)
# bayesian_ind <- stan_model(bayesian-individual-uniform.stan)
individual_posterior <- sampling(bayesian_ind, data = mle_model_data)
print(individual_posterior, "alpha", probs=c(0.05, 0.5, 0.95))
source("~/.active-rstudio-document", echo=TRUE)
players
n_players
players
n_simulations = 10 # 1000?
n_participants <- 10 # you want to overestimate this, to see how far back you need to go.
min_trials <- 450 # 450 trials over ~25mins - this is a kind of proxy for n_participants
max_trials <- min_trials * n_participants
n_trials <- seq(min_trials, max_trials + 1, min_trials)
min_players <- 100
max_players <- 1000
n_players <- seq(min_players, max_players, min_players) # you might want to make a specific step variable
players <- seq(1, n_players)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document", echo=TRUE)
df <- simulate_data(10, 5)
view(df)
View(df)
for (t in 1:n_trials){print(t)}
for (t in n_trials){print(t)}
for (t in length(n_trials)){print(t)}
for (t in seq_along(n_trials)){
print(paste(t,names(n_trials)[t],n_trials[[t]]))
}
for (t in seq_along(n_trials)){
print(t, n_trials[[t])
for (t in seq_along(n_trials)){
print(t)
print(n_trials[[t]])
}
for (t in length(n_trials)){
print(n_trials[t])
}
for (t in 1:length(n_trials)){print(n_trials[t])}
bayes_model <- stan_model("bayesian-ind.stan")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
print(getwd())
bayes_model <- stan_model("bayesian-ind.stan")
library(rstan)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R", echo=TRUE)
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
#### FILE PATH ####
print(getwd())
myfile <- "C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/data/02_2023-03-06_10h22.36.832.txt"
mydata <- read.table(myfile, header=T, sep="\t", stringsAsFactors = F)
mydata <- subset(mydata, Block=="MAIN")
print("Accuracy by Stimulus",quote=F)
for (s in 0:3) {
for (r in 0:3) {
print(paste("Stimulus ", s, " , Response ", r, " = ", length(mydata$Correct[mydata$Stimulus==s & mydata$Response==r])))
}
}
98/(49+63+36)
98/(49+63+36+98)
cm <- matrix(NA, nrow=4, nrow=4)
cm <- matrix(NA, nrow=4, ncol=4)
cm
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
sum(cm)
sum(cm, 2)
rowsum(cm, 2)
rowsum(cm)
rowSums(cm)
colSums(cm)
cm_prop <- cm / sum(colSums(cm))
print(cm_prop)
cm_prop <- round(cm / sum(colSums(cm)), 3)
print(cm_prop)
sum(colSums(cmm))
sum(colSums(cm))
cm_prop <- round(cm / sum(rowSums(cm)), 3)
print(cm_prop)
cm_prop <- round(cm / rowSums(cm), 3)
print(cm_prop)
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
cm_plot <- ggplot2(cm) + geom_tile()
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R", echo=TRUE)
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
cm_plot
cm_plot <- ggplot2(cm) + geom_tile()
cm_plot
cm_plot <- ggplot(cm, aes(X, Y, fill= Z)) +
geom_tile()
x <- LETTERS[1:20]
x
stim <- c("LL", "LH", "HL", "HH")
resp <- stim
cm_plot <- ggplot(cm, aes(stim, resp, fill= cm)) +
geom_tile()
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
cm_plot
# hm <- expand.grid(stim, resp)
cm_plot <- ggplot(aes(stim, resp, fill= cm)) +
geom_tile()
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
x <- LETTERS[1:20]
y <- paste0("var", seq(1,20))
data <- expand.grid(X=x, Y=y)
x
y
data
hm = matrix(NA, nrow=length(stim) * length(resp))
cm_plot <- ggplot(hm, aes(stim, resp, fill=Z)) +
geom_tile()
cm_plot
n_trials <- 250
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
library(ggplot2)
#### FILE PATH ####
print(getwd())
myfile <- "C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/data/02_2023-03-06_10h22.36.832.txt"
mydata <- read.table(myfile, header=T, sep="\t", stringsAsFactors = F)
mydata <- subset(mydata, Block=="MAIN")
print("Accuracy by Stimulus",quote=F)
cm <- data.frame(matrix(NA, nrow=4, ncol=4))
stim <- c("LL", "LH", "HL", "HH")
resp <- stim
Z = matrix(NA, nrow=length(stim) * length(resp))
counter = 1
for (s in 0:3) {
for (r in 0:3) {
cm[s + 1, r + 1] = length(mydata$Correct[mydata$Stimulus==s & mydata$Response==r])
Z[counter] = length(mydata$Correct[mydata$Stimulus==s & mydata$Response==r])
counter = counter + 1
}
}
n_trials <- 250
cm_prop <- round(cm / rowSums(cm), 3)
print(cm_prop)
print("Overall Accuracy (targeting 75%)", quote=F)
print(round(mean(sapply(0:3, function (x) mean(mydata$Correct[mydata$Stimulus==x]))), 4), quote=F)
if (chisq.test(table(mydata$Stimulus, mydata$Response))$p.value < .05) print("Responses are statistically non-random. ACCEPT SUBJECT.", quote=F) else print("Responses are statistically random. REJECT SUBJECT.", quote=F)
hm <- expand.grid(stim, resp)
hm$Z = Z
hm
cm_plot <- ggplot(hm, aes(stim, resp, fill=Z)) +
geom_tile()
cm_plot
x
y
ggplot(hm, aes(stim, resp, fill=Z)) +
geom_tile()
hm
ggplot(hm, aes(Var1, Var2, fill=Z)) +
geom_tile()
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
source("C:/Users/qlm573/OneDrive - University of Texas at San Antonio/Desktop/adaptive-GRT/AGRT Quick Accuracy Check.R")
ggplot(hm, aes(Var1, Var2, fill=Z)) +
geom_tile()
install.packages("mdsdt")
library(mdsdt)
data <- silbert09a
data <- mdsdt(silbert09a)
d <- data(silbert09a)
d
print(d)
View(silbert09a)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
a <- x(1,2,3,4)
a <- c(1,2,3,4)
b <- c(2,2,4,3)
cor.test(a,b, method="spearman")
b <- c(2,3,4,6)
cor.test(a,b, method="spearman")
cor.test(a,b, method="spearman")[1]
cor.test(a,b, method="spearman")[2]
cor.test(a,b, method="spearman")[3]
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
View(sim_data)
View(sim_data)
n_players
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
View(sim_data)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
View(sim_data)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
View(sim_data)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
a<- expand.grid(n_players, n_trials
)
a
a<- expand.grid(n_players, n_trials, n_simulations)
a
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
round(0.000000000002, 4)
a
b
a = c(1,2,34)
a = c(1,2,3, 4)
c
c <- cor.test(a,b, method="spearman")
c
c[3]
round(c[3],4)
round(c$p.value,4)
/[3]
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
warnings()
View(sim_data)
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
source("C:/Users/qlm573/melanoma-identification/feature-rating/btl-simulation/BTL-simulation.R")
warnings()
View(sim_data)
